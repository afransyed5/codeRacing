package com.lam.coder.projectEuler;

import com.lam.mathematics.Factorize;
import com.lam.mathematics.NumberTheory;

/**
 * Problem 12: Highly divisible triangular number
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * Answer: Triangle number = 76576500; from 12375, with 576 divisors.
 */

public class FactorsTriangleNumber {
	public static final int MAXIM = 500;

	public FactorsTriangleNumber() {
	}

	public static long find() {
		int number;
		int i = 100;
		int nFactors;
		do {
			number = NumberTheory.triangleNumber(i);
			nFactors = Factorize.numberOfFactors(number);
			if (nFactors > 500) {
				System.out.println(number + "/" + nFactors
						+ "/" + i);
				break;
			}
			i++;
		} while (true);
		return number;
	}

	public static void main(String[] args) {
		long result = FactorsTriangleNumber.find();
//		System.out.println(factors);
		System.out.println(result);
	}
}
