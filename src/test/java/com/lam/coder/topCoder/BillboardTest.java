package com.lam.coder.topCoder;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.lam.coder.topCoder.Billboard;

import junit.framework.TestCase;

public class BillboardTest extends TestCase {

	Billboard board;

	@Before
	protected void setUp() throws Exception {
		super.setUp();
		board = new Billboard();
	}

	@After
	protected void tearDown() throws Exception {
		super.tearDown();
		board = null;
	}

	@Test
	public void testEnlarge() {
		Assert.assertArrayEquals(
				new String[] {
						"#####.#####.####...####.#####.####..#####.####.",
						"..#...#...#.#...#.#.....#...#.#...#.#.....#...#",
						"..#...#...#.####..#.....#...#.#...#.####..####.",
						"..#...#...#.#.....#.....#...#.#...#.#.....#.#..",
						"..#...#####.#......####.#####.####..#####.#..##" },
				board.enlarge("TOPCODER", new String[] {
						"T:#####-..#..-..#..-..#..-..#..",
						"O:#####-#...#-#...#-#...#-#####",
						"P:####.-#...#-####.-#....-#....",
						"C:.####-#....-#....-#....-.####",
						"D:####.-#...#-#...#-#...#-####.",
						"E:#####-#....-####.-#....-#####",
						"R:####.-#...#-####.-#.#..-#..##" }));

		Assert.assertArrayEquals(
				new String[] { "####..#####.#...#", "#...#.#...#.#..#.",
						"#...#.#...#.###..", "#...#.#...#.#..#.",
						"####..#####.#...#" },
				board.enlarge("DOK", new String[] {
						"D:####.-#...#-#...#-#...#-####.",
						"O:#####-#...#-#...#-#...#-#####",
						"K:#...#-#..#.-###..-#..#.-#...#" }));

		Assert.assertArrayEquals(
				new String[] {
						"#####.......#####.#.#.#.#####.#.....#####.#.....##.##.##.##",
						"#####.......#####..#.#..#...#.......#####..#....#####.#####",
						"##.##.......#####.#.#.#.#.#.#.......#####...#...#.#.#.#.#.#",
						"#####.......#####..#.#..#...#.......#####....#..#.#.#.#.#.#",
						"#####.......#####.#.#.#.#####.......#####.....#.####..####." },
				board.enlarge("RANDOMNESS", new String[] {
						"S:##.##-#####-#.#.#-#.#.#-####.",
						"N:#####-#####-#####-#####-#####",
						"R:#####-#####-##.##-#####-#####",
						"A:.....-.....-.....-.....-.....",
						"D:#.#.#-.#.#.-#.#.#-.#.#.-#.#.#",
						"O:#####-#...#-#.#.#-#...#-#####",
						"E:#....-.#...-..#..-...#.-....#",
						"M:#....-.....-.....-.....-.....",
						"X:#...#-.#.#.-..#..-.#.#.-#...#" }
				));
	}

}
