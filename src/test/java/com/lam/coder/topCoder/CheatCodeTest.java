package com.lam.coder.topCoder;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.lam.coder.topCoder.CheatCode;

@Ignore
public class CheatCodeTest {
	CheatCode code;

	@Before
	public void setUp() throws Exception {
		code = new CheatCode();
	}

	@After
	public void tearDown() throws Exception {
		code = null;
	}

    
	@Test
	public void flexibleWordMatch() {
		Assert.assertTrue(CheatCode.flexibleWordMatch("XAY", "XAXAAY"));

		Assert.assertTrue(CheatCode.flexibleWordMatch("ABC", "AABBCC"));
		Assert.assertTrue(CheatCode.flexibleWordMatch("BB", "AABBCC"));
		Assert.assertTrue(CheatCode.flexibleWordMatch("BC", "AABBCC"));

		Assert.assertTrue(CheatCode.flexibleWordMatch(
				"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
				"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"));

		String[] keys = { "FHSHH", "IDBEHOLDA", "IDBEHOLDI", "IDBEHOLDL",
				"IDBEHOLDR", "IDBEHOLDS", "IDBEHOLDV", "IDCHOPPERS", "IDCLEV",
				"IDCLIP", "IDDT", "IDFA", "IDKFA", "IDMYPOS", "IDMUS" };

		for (String key : keys) {
			Assert.assertFalse(CheatCode.flexibleWordMatch(key,
					"IDDQDDTSFHHALL"));
		}

		keys = new String[] { "FHHALL", "IDDQD" };
		for (String key : keys) {
			Assert.assertTrue(CheatCode
					.flexibleWordMatch(key, "IDDQDDTSFHHALL"));
		}
		
		keys = new String[] {"ABCDE", "BCDEF", "CDEFG", "DEFGH", "EFGHI",
				 "FGHIJ", "GHIJK", "HIJKL", "IJKLM", "JKLMN",
				 "KLMNO", "LMNOP", "MNOPQ", "NOPQR", "OPQRS",
				 "PQRST", "QRSTU", "RSTUV", "STUVW", "TUVWX",
				 "UVWXY"
				 };

		for (String key : keys) {
			Assert.assertTrue(CheatCode
					.flexibleWordMatch(key, "AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYY"));
		}

		keys = new String[] 	{ 
				 "VWXYZ", "WXYZA", "XYZAB", "YZABC", "ZABCD"
				 };
		for (String key : keys) {
			Assert.assertFalse(CheatCode
					.flexibleWordMatch(key, "AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYY"));
		}

		keys = new String[] { 
				"LAKJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				"AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				"KJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
                "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
				"KGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
                "AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
                "KJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAH",
			};
		for (String key : keys) {
			Assert.assertTrue(CheatCode
					.flexibleWordMatch(key, "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ"));
		}

		keys = new String[] {"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSS", 
				 "LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKASSJ",  
				 "LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKHHSJ",  "LAKDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",   
				 "LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLLSLJKAHS",    "LAKGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",    "LAKJDGJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHGHHSDKKSJDHFHJGKDKLSLSLJKAHS",   
				 "LAKJDGSJKGLSDKHFDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",   "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLJKAHSJ",
				 "LAKJDGSJKGLSDHFKDFHDGHHSDKKSJDHFHJGKDKLSLSJKAHS",    
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHS",   "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",   "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJKDKLSLSLJKAHSJ",
				 "LKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHS",    
				 "LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLKAHS",     "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFGKDKLSLSLJKAHSJ",
				 "LKJDGSJKLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHS",     "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHHJGKDKLSLSLJKAHSJ",
				 "AKJDGSJKGLSDKFKDFHDGHHSSJDHFJGKDKLSLSLJKAHS",        "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFJGKDKLSLSLJKAHS",   "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",   "LAKDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAS",   
				 "LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",   "LAKDGSJKGLSDKFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJKGLSKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHSKKSJDHFHJGKDKLSLSLJKAHSJ",
				 "LAKJDGSJGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",    "LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHSJ"};
		
		for (String key : keys) {
			Assert.assertFalse(key, CheatCode
					.flexibleWordMatch(key, "LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ"));
		}
	}
	
	@Test
	public void testCodeMatchesSimple() {
		Assert.assertArrayEquals(new int[] {},
				code.matches("AABBCC", new String[] { "ABBB", "BBCCD" }));

		Assert.assertArrayEquals(new int[] { 0, 1, 2 },
				code.matches("AABBCC", new String[] { "ABC", "BB", "BC" }));

		Assert.assertArrayEquals(
				new int[] { 0, 3, 4 },
				code.matches("UUDDLRRLLRBASS", new String[] { "UUDDLRLRBA",
						"UUDUDLRLRABABSS", "DDUURLRLAB", "UUDDLRLRBASS",
						"UDLRRLLRBASS" }));

		Assert.assertArrayEquals(
				new int[] { 0 },
				code.matches(
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						new String[] { "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" }));
	}

	@Test
	public void testCodeMatchesComplex() {
		Assert.assertArrayEquals(new int[] {},
				code.matches("IDDQDDTSFHHALL", new String[] { "IDDT", "IDFA" }));

		Assert.assertArrayEquals(
				new int[] { 0, 11 },
				code.matches("IDDQDDTSFHHALL", new String[] { "FHHALL",
						"FHSHH", "IDBEHOLDA", "IDBEHOLDI", "IDBEHOLDL",
						"IDBEHOLDR", "IDBEHOLDS", "IDBEHOLDV", "IDCHOPPERS",
						"IDCLEV", "IDCLIP", "IDDQD", "IDDT", "IDFA", "IDKFA",
						"IDMYPOS", "IDMUS" }));

		Assert.assertArrayEquals(new int[] { 0 }, code.matches(
				"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
				new String[] { "KGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL" }));

		Assert.assertArrayEquals(
				new int[] { 1, 3, 7, 13, 17, 27, 43 },
				code.matches(
						"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
						new String[] {
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSS",
								"LAKJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKASSJ",
								"AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKHHSJ",
								"LAKDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",
								"KJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLLSLJKAHS",
								"LAKGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
								"LAKJDGSJKGLSDKHFDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLJKAHSJ",
								"LAKJDGSJKGLSDHFKDFHDGHHSDKKSJDHFHJGKDKLSLSJKAHS",
								"KGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJKDKLSLSLJKAHSJ",
								"LKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHS",
								"AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFGKDKLSLSLJKAHSJ",
								"LKJDGSJKLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHHJGKDKLSLSLJKAHSJ",
								"AKJDGSJKGLSDKFKDFHDGHHSSJDHFJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHSJ",
								"LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAS",
								"KJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAH",
								"LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKDGSJKGLSDKFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHSJ" }));

		Assert.assertArrayEquals(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }, code.matches(
				"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYY",
				new String[] { "ABCDE", "BCDEF", "CDEFG", "DEFGH", "EFGHI",
						"FGHIJ", "GHIJK", "HIJKL", "IJKLM", "JKLMN", "KLMNO",
						"LMNOP", "MNOPQ", "NOPQR", "OPQRS", "PQRST", "QRSTU",
						"RSTUV", "STUVW", "TUVWX", "UVWXY", "VWXYZ", "WXYZA",
						"XYZAB", "YZABC", "ZABCD" }));
	}

	@Test
	public void testMatchesSystemTest() {
		Assert.assertArrayEquals(new int[] { 0 },
				code.matches("XAXAAY", new String[] { "XAY" }));
		Assert.assertArrayEquals(
				new int[] { 0, 3, 4 },
				code.matches("UUDDLRRLLRBASS", new String[] { "UUDDLRLRBA",
						"UUDUDLRLRABABSS", "DDUURLRLAB", "UUDDLRLRBASS",
						"UDLRRLLRBASS" }));
		Assert.assertArrayEquals(new int[] { 0 }, code.matches(
				"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
				new String[] {
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"AABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						"BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" }));
		Assert.assertArrayEquals(
				new int[] { 0 },
				code.matches(
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
						new String[] { "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" }));
		Assert.assertArrayEquals(new int[] { 2 }, code.matches(
				"AAAAAAAAAAAAAAAAAAAAAAAAAABCBABCBABCBABCBABCBABCBA",
				new String[] {
						"ABCBABCBABCBABCBABCBABCBABCBABCBABCBABCBABCBABCBAB",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCBABCBABCBABCBABCBA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAABCBABCBABCBABCBABCBABCBA",
						"AABBCCBBAABBCCBBAABBCCBBAABBCCBBAABBCCBBAABBCCBBAA" }));
		Assert.assertArrayEquals(new int[] { 0 }, code.matches("GOOD",
				new String[] { "GOD", "GODMODE", "GIMME" }));
		Assert.assertArrayEquals(
				new int[] { 0, 11 },
				code.matches("IDDQDDTSFHHALL", new String[] { "FHHALL",
						"FHSHH", "IDBEHOLDA", "IDBEHOLDI", "IDBEHOLDL",
						"IDBEHOLDR", "IDBEHOLDS", "IDBEHOLDV", "IDCHOPPERS",
						"IDCLEV", "IDCLIP", "IDDQD", "IDDT", "IDFA", "IDKFA",
						"IDMYPOS", "IDMUS" }));
		Assert.assertArrayEquals(
				new int[] { 8 },
				code.matches("IDDQDDTSFHHALL", new String[] { "IDBEHOLDA",
						"IDBEHOLDI", "IDBEHOLDL", "IDBEHOLDR", "IDBEHOLDS",
						"IDBEHOLDV", "IDCHOPPERS", "IDCLEV", "IDDQD", "IDDT",
						"IDKFA", "IDMYPOS", "IDMUS", "IDSPISPOPD" }));
		Assert.assertArrayEquals(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }, code.matches(
				"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYY",
				new String[] { "ABCDE", "BCDEF", "CDEFG", "DEFGH", "EFGHI",
						"FGHIJ", "GHIJK", "HIJKL", "IJKLM", "JKLMN", "KLMNO",
						"LMNOP", "MNOPQ", "NOPQR", "OPQRS", "PQRST", "QRSTU",
						"RSTUV", "STUVW", "TUVWX", "UVWXY", "VWXYZ", "WXYZA",
						"XYZAB", "YZABC", "ZABCD" }));
		Assert.assertArrayEquals(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
				27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
				43, 44, 45, 46, 47, 48, 49 }, code.matches(
				"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
				new String[] { "ABCACBACBCACABCBAZAZAZ",
						"ABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAZ",
						"ABBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCACBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBACCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCBCAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAACCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCABBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCBAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAZAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZAZ",
						"ABBCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBCCCACBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCACBBBACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBACCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBACCCBCAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCBCAACCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAACCCABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCABBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCABBCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBCBAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCBAAZAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAZAZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAAACCCCAABBBCCBAAAZAZZAZ",
						"ABBCCCACBBBAACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBCCCACBBBACCCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCACBBBACCCBCAAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBACCCBCAACCCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBACCCBCAACCCAABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCBCAACCCABBBCCBAAAZAAZZZAAZ",
						"AABBBCCCCACBBBBAACCCCBCAACCCABBCCBAAAZAAZZZAAZ" }));
		Assert.assertArrayEquals(
				new int[] { 1, 3, 7, 13, 17, 27, 43 },
				code.matches(
						"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
						new String[] {
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSS",
								"LAKJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKASSJ",
								"AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKHHSJ",
								"LAKDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",
								"KJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLLSLJKAHS",
								"LAKGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
								"LAKJDGSJKGLSDKHFDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLJKAHSJ",
								"LAKJDGSJKGLSDHFKDFHDGHHSDKKSJDHFHJGKDKLSLSJKAHS",
								"KGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSL",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJKDKLSLSLJKAHSJ",
								"LKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHS",
								"AKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFGKDKLSLSLJKAHSJ",
								"LKJDGSJKLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHHJGKDKLSLSLJKAHSJ",
								"AKJDGSJKGLSDKFKDFHDGHHSSJDHFJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJDHFJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSJHFHJGKDKLSLSLJKAHSJ",
								"LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKSDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDSJKGLSDKHFKDFHDGHHSDKKSJDHFHJGKDLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKKJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSDKHFKDFHDGHHSDKSJDHFHJGKDKLSLSLJKAS",
								"KJDGSJKGLSDKHFKDFHDGHSDKKSJDHFHJGKDKLSLSLJKAH",
								"LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKDGSJKGLSDKFHDGHHSDKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJKGLSKHFKDFHDHHSDKKSJDHFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHSKKSJDHFHJGKDKLSLSLJKAHSJ",
								"LAKJDGSJGLSDKHFKDFHDGHHSDKKSJDFHJGKDKLSLSLJKAHS",
								"LAKJDGSJKGLSDKHFKDFHDGHHDKKSJDHFHJGKDKLSLSLJKAHSJ" }));
		Assert.assertArrayEquals(
				new int[] {},
				code.matches("", new String[] {
						"UUJHBMAPZIEGHKEEYGMIKHTJVNLEAUCWOODPCFEBNKJWUNBUTP",
						"CDYYOWNAANWFJKTPZVUFYKSHGOUJJNZNTXNHTBJWQFBAPWRQRN",
						"YRXQYGEUPPJOFCOUKJVTFMBGOQCFJVSHMSZMYDGNVQECUUWEDU",
						"AJGDRWVWBERVLGNMUNQDBNVHRPBNWEHYPPBJLWFOBYMOGBBBPT",
						"ESIBZZQCMMIWKYNLJBIORLODZVHCYWVEQDFPCVTRKBPWBCIKDS",
						"YVFPAGMHJKFEQVKXMOUFFEHWBIZLTCFTXKKAQWHBINIYISVVGS",
						"AOWJKZSJMNOTINFTNYPVZAKHYSBWPIOSYMBKOVWCKKWTZBMNZD",
						"KBDWKEQMCGWSAUEBGUZCXJOTCQWQDYWPZZNJFDXHJTZJPGNWAM",
						"AXXPSCFPSKPOBOQOZXRXFDSGOIODEPREOPVJRCALOPAPFSFEPZ",
						"DWCWDSGRWKINQZEOIVQIHHZJYEDEKUDORHMWBSPXEANWZRKJPD",
						"TYKSJIYMMIGRYZAKVCELBILQFMIRVZUQXEIINGUBQCVPCVBXZG",
						"KDQXTXJDPGEJWBQGLDOFGFKBWMZXLADYDWVZTHEINJUMMKUYPJ",
						"FVQPXMDYJPYPNELKDERJPHSLTFVNFKYKFOAECDCOUBDJHQUKWN",
						"TNUOYNTTBAFBKNQMRSQWIMZLWGDSSCFLPABOPWJSWPUHCKTVEL",
						"RPYSCWYGQQIVEXXFNNCXHYOBHSNBPUOJJMBLKATAQBYWBXCQMG",
						"PUEDVMXLPPHDYQSZDEZXFSYFOBCSSPYHJFNGRMTIBALZQFBWKC",
						"TRUTWLVYFPPEWAJLHCYCMBDXBVFCRPEKIBEEOBETQUZOWKADOA",
						"GADLAGGFIAWPKESQKIROBJKDYHNAMECUEFFEMMLWOJNYNHRXPK",
						"OTUYWUHLWURYOWFUCTIQSWZFWPNNMEAAXUBVOIJKCAKTWRNBLX",
						"RDVSKTHZJWEJWDDZZTIKFMKRFJIUMTTFYOXJIFKRBQCZUFZVAJ",
						"FFVRWDAGXMCRRAHRLRYYKBOMCITBFTMMAKEYNGFMVHFOJPFXGD",
						"VTGJFJUBMZWZMXLQXYWCMRLSGXHNUPTPIZAQIUTVUPWIMHAKHY",
						"OTSCNAZWNTMGKWGKOQHHNBXJLLSLVZJMTBOIBPFRIRXUPFGEYN",
						"LLQKXBWPMTPYFKBVSFKZWUSVOIDVOBIZOBMLCIBRBSPJCSEWXR",
						"WVLQTCYWZMZJONKABNKCENWVWYPDWPUUKHLDJLBIYAUOQEQTRA",
						"VXNTUMTKRPZNMLUXRGISQIVKYNPOGIODGEWAQPKHGLUSXQROYC",
						"IPKDZJSQXYZOBHSZHKOURVFNNCFFSEHBTTEUEXNEXMSBVMACWP",
						"WPMEEZGJGBNPCILIFPHSVFGNGBBGFXXCOJISLQCTRRLTCWCHNJ",
						"ZJQHYWKAFPZCROMZGZQKSJCDDEZHNPSOYJVYHFYMUAROOFPUEH",
						"FWRJAWPBDCQVQQGNPOSPCOPVEFAUAEDHDWSDSHGXJZVBPDOGTI",
						"YWWPRBXUXXYCGBBYGVHPTSOQTFTHONPOLNFEQCYNBZSHATHJOQ",
						"AJIOZBVVKJKZZXNFBDHCTJBNSDGCMWSMGBCHEAEPLOQLNDQPJZ",
						"TEKURDXZHMVZADCFNHFRWQIMBVSTMDTFJFBCIZBPNYRNETSRCZ",
						"KYQSNRQHNEKIKVNNXYOYPBYGRCCLVELGFBYSUQBHVNPHIFUFDJ",
						"FSMDBDIDPDHALMBMGVCHFXUWECBBJGMOZYUCCCFRHMTTBWFHTH",
						"RYHLVNQYOZFAQGBKIDMNWVBPOENTMGDFFKQCZIAOKFQANTMVWA",
						"KUVOLKSYFGFILMSEOSMQIYYAYLUMHSMRNIHYSAZXGEIUQCYEWM",
						"UGLSHLGDYNVMGKUOLOQKOWOWSGYQMVFGDSBKDHPDWNQEXMSKBI",
						"UPHKNBQNSCKZLOROYWXQCVDSZCEUNHEJWNULPMZJPJICXBSYXP",
						"QZMTTLVAHKHOUGBORQCQBTCJVBMPBKERLSKFGIFNSMBOSDCMVF",
						"EXAGIWKVLLHSDSMPZSZEGUTJINOLZKSEJSMTQYOEKVYPQKGPDG",
						"ULAPUICJVEVPKGKWZCVOIHLIYBTETYMNLMEHXGSUMNMWTYVVCS",
						"JLZWTXAOBTOOIBCMJBUDYHRMDMKAHOSSZRPVQPLUICKSDOEOQY",
						"SQHLCNZONJCGBEZSBQJMMTQWLWKRKCQESZRWMRKACNIFTHYUZJ",
						"ILFZJSVUKHYAORBFPOYAQAPYGIHGCJPMWWLGPICZQABGTCLJQM",
						"LIMAGSKQYOZQAVOMDDWFCOIFUBIIKAUVJGXRBHHBVITYEIKJLG",
						"PQVXVRADZNGTKRCIIDRQGPAANGIZQVHFLEEJWGOVTURELTOUYH",
						"MEWOELVOKLKSSXYYGUEVSYRLEDGUZEBNKABRLYFYJRQBRQZXLE",
						"UFEOQKTYESCHHMHKDVJLTUELWVBXVOBRVHFNRYLXSPHBCQOHLX",
						"UGTZRPUVNRLQJHAOURPIRHXYJBOXJCWDIPECHBZUSKMBTMSOGH" }));
		Assert.assertArrayEquals(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
				27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
				43, 44, 45, 46, 47, 48, 49 }, code.matches(
				"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
				new String[] { "A", "BA", "ABA", "AABA", "AAABA", "AAAABA",
						"AAAAABA", "AAAAAABA", "AAAAAAABA", "AAAAAAAABA",
						"AAAAAAAAABA", "AAAAAAAAAABA", "AAAAAAAAAAABA",
						"AAAAAAAAAAAABA", "AAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAABA", "AAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAABA", "AAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAABA", "AAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAABA", "AAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA",
						"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA" }));
		 Assert.assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		 11, 12, 13, 14, 15, 16, 18, 19, 21, 22} ,code.matches(
		 "AAABBBAAACCCBBBCCCDDDBBBDDDEEECCCEEEAAAFFFBBBEEEFF", new String[]
		 {"AB", "BA", "AC", "CB", "BC", "CD", "DB", "BD", "DE", "EC", "CE",
		 "EA", "AF", "FB", "BE", "EF", "ABBBA", "BAAAB", "ACCCB", "CBBBCCCDD",
		 "CBBBCCCDDDE", "CDDDBBBD", "ECCCEEEAAFBEF"}));
		Assert.assertArrayEquals(new int[] { 44, 46 }, code.matches(
				"BCCEACDABDAEAABCECBBDCDDBDCBBABCCBDADCAECAEDDCACBD",
				new String[] { "AEAEE", "DEBAB", "BDDEE", "CBCBB", "EDEDB",
						"ECDDD", "CECCD", "EDCAD", "DEDEA", "DBBCC", "EBCDB",
						"BEDED", "BBEBB", "EAEBC", "ECBCD", "DCEEA", "DEDCE",
						"ADEDD", "EABDB", "CCDBA", "ACEEC", "CCEDC", "BDDAB",
						"ECEAA", "EECBE", "DDDDC", "BEBCD", "DAADA", "EBECD",
						"CCABE", "BBEDC", "AECEC", "BCDDE", "BBBEB", "CDDDD",
						"BACCD", "BDBCD", "DAEDE", "CEDAC", "CEBEA", "CDAAB",
						"ACDCB", "BBBDA", "EDABD", "BDAEA", "CEBDA", "BBDCD",
						"BCCBC", "DEAEE", "ABADC" }));
		Assert.assertArrayEquals(new int[] { 0, 27, 38, 45 }, code.matches(
				"HIFGHGIIHIJHHFFFHHFFJGIHGFGGGFJJJHHIIHGFGIHFIFFFHG",
				new String[] { "HIHGF", "IGIGF", "JIGIF", "IIFHF", "IFIHG",
						"GHGJJ", "JGHIH", "FIGIF", "IJFJJ", "FJIHG", "IFHII",
						"FGFIF", "HIJGG", "GGHJH", "HHGJG", "GJHGI", "GGJFJ",
						"JFHJF", "FIIJF", "HHIGH", "HIJGJ", "IHIHF", "IIGHI",
						"FGFJI", "GJIGF", "IFIJG", "FGGGH", "FGGFJ", "IJJJG",
						"FGFFG", "FIHIH", "IJHGI", "GIGHJ", "GFIJF", "HIJGH",
						"IIJFJ", "HFJJI", "GJHGH", "HHFJG", "HHGFG", "HJJIH",
						"JIGFI", "FHFGI", "JFIIG", "FIIIH", "GFGIH", "HFGJF",
						"IFJJF", "JGHFI", "FJIFJ" }));
		Assert.assertArrayEquals(new int[] { 39 }, code.matches(
				"LLNMNOLKLNLNOLNOMKMKKMOOLNOLOMMMNMKNLNOONKNMMNOLNL",
				new String[] { "LKKMK", "LNOOO", "LLMKL", "OKMMO", "MLKMK",
						"OKOKL", "MNLML", "LKOLK", "KONML", "OLMOL", "LLOLK",
						"OKKLM", "LNLKL", "MLNNO", "NNOOL", "KKOOO", "MLMLM",
						"MNKKO", "MNONN", "MMMLM", "NLLMK", "OKNKO", "ONMOL",
						"MNLMN", "KLOKM", "MMLLK", "OKMKO", "OLOML", "LOLKN",
						"KMNLL", "MMNLO", "MKNNM", "OMMLO", "NMKNK", "OLLKL",
						"LKLOM", "MLLKO", "MMMKL", "LLKKO", "KNMMN", "OLLKO",
						"KLOLM", "NNLLL", "KNNOL", "LKMOK", "OLLLN", "OKKLM",
						"OLKKM", "MLKNM", "NLLOM" }));
		Assert.assertArrayEquals(new int[] { 24 }, code.matches(
				"RTTTRRRSQQRSRQQTPQTRQPQRRRRRRRTRRPQQRPTSSTSPPPRRSQ",
				new String[] { "RTSSQ", "PPSPT", "RTQQT", "TRTQT", "TPSSP",
						"PPRPS", "QRRQP", "PTRPT", "QRPPQ", "QTSPS", "RPSRP",
						"PPPPP", "SQRRT", "RRSTR", "TRQQR", "RSTSP", "RRRRP",
						"RRPTR", "PRPTT", "PSSPT", "PRQRS", "QQSPT", "QTRSQ",
						"TSPTR", "SQRSR", "SPPRQ", "TRPPQ", "PSSTS", "RPTQP",
						"PPPQT", "SQRPQ", "TPRTR", "PSRPQ", "SPTSQ", "PSSTT",
						"TRPTP", "QTQQQ", "TPRQR", "TSRSP", "PTSPR", "TRRSS",
						"RTPTP", "RPPPQ", "QPTPQ", "QRRPP", "RQTPS", "TPPSP",
						"SPTQQ", "TSRQT", "PPQTP" }));
		Assert.assertArrayEquals(new int[] { 18, 49 }, code.matches(
				"VXUVUUWYYYWXYXYWXXWUUXWVVYVXUXUVVUWYXVUYVYWWUYYXWX",
				new String[] { "XWVVV", "UWWUW", "WUVVW", "UUUYW", "WUWYW",
						"WXYWW", "WUUVX", "XVWWV", "WUXXV", "UXXXW", "WUYVV",
						"YUWUW", "YWUVU", "UYXXW", "VUYYX", "UWXUU", "XWWYY",
						"XXYWX", "YWXYX", "UYUVY", "YWYXY", "YUVUW", "XUYUY",
						"UUUWU", "UVWXW", "WVXYW", "XXYYX", "UYUVV", "WVVYX",
						"UYYWV", "YXWXX", "YWYXW", "VXWXW", "XXXXW", "YXXUW",
						"WXVXU", "XYXWY", "WYVXY", "UWYUW", "VXWUX", "YVVUY",
						"XYWWW", "YWXUY", "WYUUY", "VVVUX", "XYVVV", "VWWXW",
						"VVVUU", "UWWXY", "YWXYX" }));
		 Assert.assertArrayEquals(new int[] {2, 9, 10, 13, 15, 20, 21, 26, 28,
		 30, 34, 35, 40, 42, 44, 46, 49} ,code.matches(
		 "ZXYXYYYZYZXXXZXZYXYXZZZXXZZYYYXZXYZYXYYYYYYYYZYXYX", new String[]
		 {"YXXXX", "XXXZZ", "XZYXZ", "YYZXX", "YZZXY", "ZYZZX", "XXYYZ",
		 "XZZXY", "ZXYZX", "XYXYY", "YXYYY", "ZXZZX", "XXYZZ", "XZYXZ",
		 "ZXYYX", "YXYZY", "XXZYZ", "XZZYZ", "XYZZX", "ZZXXY", "YXYZY",
		 "YYYZY", "XXZZX", "ZYXXZ", "ZXYYX", "XYYXY", "ZYZXX", "YZXYZ",
		 "YYYYZ", "ZYXZZ", "XYZYX", "YYYZZ", "XYYZZ", "XYZXZ", "ZZZXX",
		 "YXZZZ", "YXXZY", "YXYZX", "XXZZX", "ZZZYZ", "YXYXZ", "XZZZZ",
		 "XYZYX", "YXYZX", "YXZXZ", "ZZXYY", "ZXZZY", "ZZZZY", "YXXYY",
		 "YXZZX"}));
		 Assert.assertArrayEquals(new int[] 
		 {1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 19, 20, 21, 24, 26, 28, 32, 41, 42, 43, 49} 	
		 ,code.matches(
		 "ZZYYZXYZXYZYXZZZXZZYZZZYYYZYZZZZXYZXZXXZYZYYXXYZZZ", new String[]
		 {"ZZXXY", "ZZYZZ", "YYYYY", "XYZXY", "ZYZZZ", "YYYZY", "ZYYZY",
		 "ZYYXY", "ZYXYX", "YYYYY", "XYZYX", "YXYZX", "ZXZZY", "ZYXYZ",
		 "ZZZXZ", "YXYZY", "XYXXZ", "ZZXXY", "ZZZXX", "YZYYZ", "YZYZZ",
		 "YYYZY", "XXXYY", "XXYXY", "ZZXZZ", "YYZZZ", "ZZXZZ", "YYYYZ",
		 "ZYYXY", "XYXZZ", "YYYYY", "YYYYZ", "ZZZYZ", "YXZYY", "YYZXX",
		 "ZZYYX", "YXZZY", "ZXXYY", "YYYZZ", "YYZYX", "YZXYX", "ZYZZY",
		 "XYZZZ", "YZYZZ", "YZXZZ", "ZZYXZ", "YYZYX", "ZZZZZ", "YZZXZ",
		 "ZYYYZ"}));
		Assert.assertArrayEquals(new int[] { 2 }, code.matches(
				"DRDWDODWWWWDWWWWDROOWRWDWOROOWRWROOODWODWORWRRWOWO",
				new String[] { "RWWDW", "WWRRO", "RWOWO", "ROWRR", "DRWRR",
						"RWDDO", "WROWO", "OOODD", "RODDO", "WRROW", "OWDOR",
						"ODDWR", "WOWOO", "ODRRR", "OWWWW", "OORWR", "ROROR",
						"ODOWD", "DWWWO", "ROWWW", "DRWDR", "WWDRW", "OOOWR",
						"DOOWO", "OWOOW", "RDODW", "ORRRO", "WROWO", "RORDO",
						"WDRRD", "DDDWW", "DDWOR", "WRWRW", "ORDRR", "WWWRW",
						"ORDWW", "RDDRW", "WODWR", "OWOOR", "ORWWW", "DWODR",
						"OWOWW", "ORWOW", "WORDO", "WWOOO", "DDDDD", "DRWWO",
						"RORDO", "ROWRR", "WRDRO" }));
		// Assert.assertArrayEquals(new int[] {5, 6, 7, 9, 12, 18, 19, 25, 28,
		// 30, 31, 34, 36, 41, 47, 49} ,code.matches(
		// "OOORRRDRRODDDDDWDRRRRORDWWODDRWWDOROWOWRRDOORWRORW", new String[]
		// {"WORD", "WORO", "OODO", "ORRW", "WROW", "WWDO", "OORD", "RWDO",
		// "OODO", "RRRD", "DOWO", "DDOD", "ORDR", "RRDW", "DODO", "RDDD",
		// "WRWR", "WRRW", "DROR", "ORRD", "WOOD", "WWDD", "RROW", "OWDO",
		// "RDWD", "ORDW", "WWRR", "RWOR", "RROR", "RWOW", "DRWW", "RDRO",
		// "RRWD", "WDDW", "DRRO", "RDDW", "OORW", "OWWW", "ROOO", "WDRD",
		// "ORRO", "OROW", "WWOR", "DWDO", "OOOD", "OODW", "RWOD", "DDRW",
		// "OWOR", "RDRR"}));
		// Assert.assertArrayEquals(new int[] {11, 41} ,code.matches(
		// "OOAOUIEOUAEUEIEIUIYUEIYYEAYIYEYAUOOAYIUOEOYAOEIEOI", new String[]
		// {"OIUA", "IOYY", "UUUE", "OAYU", "EUYY", "AAIY", "AAAA", "YEAE",
		// "IOEI", "UAEI", "OUUU", "UEIY", "YYUO", "OYEE", "OYIA", "EAYE",
		// "OEEI", "YAIA", "UAUO", "EYIY", "UYAA", "IEEO", "EEOA", "IOEY",
		// "IIYE", "IIIE", "AUIA", "OUYA", "EOAO", "YEAA", "EIAO", "YYAY",
		// "EAAE", "IAAA", "OIAA", "EOAI", "EUUA", "UUAY", "AUAO", "OAIU",
		// "AEOA", "YUEI", "AEOY", "YEIA", "UUUI", "IUYE", "IYUO", "YYEU",
		// "AIUY", "AOAE"}));
		Assert.assertArrayEquals(new int[] { 14, 30, 42, 45 }, code.matches(
				"AIAAAAOIEAIIIAEOOAEEOIOUIAOUUEIUAIEOUAAEAIAUUOIIUU",
				new String[] { "EUEU", "EAUU", "IAIE", "EOOO", "EUOO", "IOAI",
						"IEEE", "OIAU", "OOAU", "EAEA", "AOEI", "OEAE", "AAUO",
						"AEIU", "IAAO", "UOUO", "EAUU", "IAUI", "EAEE", "OOOU",
						"OUUO", "OOIA", "EAAI", "OIIE", "UIEE", "UIAI", "AIUO",
						"IUUE", "OOEE", "UUUA", "UEIU", "OAAI", "UOAA", "EEOE",
						"AIEI", "EEAE", "EIAA", "OUIU", "IIOE", "UAAO", "UEOI",
						"UOAU", "AEOO", "IUIU", "EIEE", "OUAA", "OAOI", "AEIU",
						"UAEO", "EEUE" }));
		Assert.assertArrayEquals(new int[] { 0 }, code.matches(
				"WTTEETQYTYETEYRYTWREYQYRQEQRQQWYTYWTWWRRTYEQERRTTW",
				new String[] { "YTYE", "YYTY", "WTYE", "RWYR", "RTEQ", "WWRW",
						"YTTR", "QWTY", "RWWQ", "WQRQ", "ERQT", "EYWT", "RRTE",
						"EQTE", "EEYE", "WWET", "EWEW", "YQYE", "WYQW", "TWYY",
						"ETER", "ETYT", "TEQQ", "RQER", "EYRW", "YEWQ", "QWWT",
						"QWEW", "RETR", "QWWT", "RYET", "QYWQ", "EEYW", "YWYR",
						"QQYY", "YWQQ", "WERY", "RTEQ", "ETEQ", "WRTR", "TREW",
						"TWTR", "QREY", "RQQT", "ERER", "QTWQ", "QRQE", "TTRE",
						"YQRE", "WWYY" }));
		// Assert.assertArrayEquals(new int[] {3, 5, 13, 16, 17, 18, 19, 21, 23,
		// 25, 35, 39} ,code.matches(
		// "EWRQTERQTYEWWEYTWERTERWYQTQRQYWWQTYRYEWRYREWTWYRRQ", new String[]
		// {"WRW", "QEE", "YER", "RQT", "TTQ", "EWR", "TQQ", "EEQ", "RTW",
		// "QWE", "TEY", "QEY", "EYQ", "RRQ", "WYT", "YWT", "RTE", "WQT", "EWE",
		// "WYR", "TRR", "RRQ", "RRR", "RQT", "WYT", "RYR", "WQW", "EWY", "QWQ",
		// "RRY", "TWW", "EET", "QYE", "RQQ", "EWQ", "TYR", "WTR", "WQE", "QWE",
		// "WEY", "TQT", "YQQ", "EQT", "TET", "EEQ", "EQY", "RYW", "TQE", "WWW",
		// "RQR"}));
		// Assert.assertArrayEquals(new int[] {0, 1, 3, 6, 19, 25, 37, 38, 41,
		// 47} ,code.matches(
		// "RRPTDOTERDPDTDROEETCERCRCPPECTECDOOPPRTRCTCOCTPODP", new String[]
		// {"PPR", "ERC", "EPO", "PPR", "CET", "DTO", "OET", "DCP", "ERT",
		// "TED", "OTD", "TDD", "CTR", "PTR", "TCD", "EEP", "RRT", "EOD", "TRO",
		// "EET", "CDE", "TDT", "PRO", "ORO", "ORC", "CER", "RPR", "DTE", "REE",
		// "ODO", "REE", "PCT", "CRR", "DED", "EDC", "ROR", "REP", "CPP", "OPR",
		// "DCO", "ETR", "OPP", "PCR", "RTE", "CDP", "ECO", "DTR", "RCP", "TCD",
		// "RTE"}));
		Assert.assertArrayEquals(new int[] { 10, 42 }, code.matches(
				"RERETRTCEOTCPROCCPDDECODRPCPDERCOEPOCTCORODPTCCOEE",
				new String[] { "RCOT", "TTPO", "TTDT", "OECO", "EROO", "TRPP",
						"RTEP", "PCEO", "EROC", "DPEE", "PTCO", "RRCD", "RDCD",
						"OCTT", "CETE", "TEDC", "DRRT", "OPCO", "CRPT", "ECPD",
						"OEPT", "OTOP", "CORC", "TCDP", "TDTR", "RCET", "TOTR",
						"PPOO", "EOPD", "OCTE", "PDRP", "TPCO", "ROTC", "ERPC",
						"EPPE", "CPTO", "CPDC", "EDRT", "RCOR", "EPED", "CDRR",
						"OOCD", "OCPD", "EPDP", "DOCP", "CPOP", "ETOD", "PTRE",
						"PEEC", "DRTR" }));
		// Assert.assertArrayEquals(new int[] {6, 11} ,code.matches(
		// "EMEMDTEETEIBMETMTTBTEEDIDIEEIEEEDMITEEDTMETEBMEEEM", new String[]
		// {"IMIB", "BIIE", "IEBE", "BEIT", "IMDI", "EMTT", "EEEM", "DMTI",
		// "EEID", "TETM", "TDED", "ETMT", "BMBE", "TEBD", "DEMD", "IBEI",
		// "EDEB", "EBET", "BMME", "BEIM", "EIID", "MMIM", "IBBB", "BMII",
		// "BEME", "EIBB", "BTEM", "IITT", "EEMM", "IBEE", "EDEE", "MEET",
		// "BDBB", "EEMI", "IITD", "EEME", "MIID", "IMDT", "MEMT", "EDEE",
		// "IMEE", "EIME", "DETE", "EBDI", "DIMI", "TBEE", "EETB", "EBBT",
		// "MIID", "DBID"}));
		// Assert.assertArrayEquals(new int[] {13} ,code.matches(
		// "TIIHHHITBITTTDBIIHHTTBITDTDTIDHDDTBTHHITDDTTIITITB", new String[]
		// {"HHIHDB", "DHIIII", "TIIBIH", "ITIIDH", "HBBTIH", "DTBBHD",
		// "HTTTHD", "DHTTHD", "BDDTIH", "DBDHBB", "BIBTHD", "TIBBTI", "BTTBTH",
		// "HDTBTH", "DDIITH", "BIDTTI", "HTHIIB", "BIDBTD", "TDDHBH", "IHHHDI",
		// "DBBDDI", "IHHHTT", "IBIBTH", "DTTDIB", "TBIITB", "BTHTTH", "TTIHBI",
		// "HTHBTH", "ITDIDI", "TBTDHT", "BIHDID", "TDDDTH", "BDBDHI", "IDIBIT",
		// "TDBTII", "ITBTHT", "DBBDII", "HHBTID", "DHDDII", "DIBBIT", "TBIBDT",
		// "IIIHDB", "HHHDHD", "TITTBI", "TBBITT", "TTTDID", "TBIDTI", "IHHDTI",
		// "IHHIID", "BDHDBH"}));
		// Assert.assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5, 7, 8, 11, 12,
		// 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
		// 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49}
		// ,code.matches( "LOLOLLLLOOLLOLLLOOLLOLOLOLOOLLOLOOOLLLLOOLOOOOOLLO",
		// new String[] {"LLOLLL", "LOOLLL", "OOLLOL", "LLOLLL", "OOOLLO",
		// "OLOLLL", "LLOOOO", "LLOLLL", "LOLOOO", "OLLLLL", "OOOOOO", "OOLLLO",
		// "LLOOLO", "OLLLOO", "OLOOLO", "LLLOOO", "LLLLLO", "OLOLOL", "LOLLOL",
		// "LLLOOO", "OOOOLL", "OOLOOL", "LOOLOL", "LOOLLL", "LLLOOL", "LLOOLL",
		// "OOOOLL", "OOOLOO", "OOLLOL", "OLLOOL", "OOLOLL", "OOOLLL", "LOOLLL",
		// "OOOOOL", "LLLLLO", "LOLOLL", "OOOOOO", "OLOLLO", "LOLOLO", "OLLLOL",
		// "OOOLLL", "LLOLOO", "OLOLLO", "OLLOOL", "OLOOLL", "OLOLLL", "LLLLLO",
		// "OLOLLO", "OLOOOL", "OLLLOO"}));
		Assert.assertArrayEquals(new int[] {}, code.matches(
				"TEENEIEEEINNITEINTTTNEIEEIEEIENETEETNTIEEIEINTTNNN",
				new String[] { "TITIEE", "EINIII", "NTENIE", "EEENEE",
						"TEETII", "INEEIT", "TNETIN", "NIEEIN", "TNETNT",
						"ITIINE", "TIEINN", "EENEII", "EIETIN", "TEITII",
						"NENTNN", "ITTNNT", "NEINTE", "ITNNNI", "IEITIT",
						"EIIEEI", "NNNTNN", "NNETNT", "ITNITN", "EEENIN",
						"TITNNI", "INTITT", "IEEIIE", "ETIEEN", "ETEETI",
						"EITIIT", "ETEINI", "EINTTI", "TIEENE", "ENIEEN",
						"NTITNT", "NENENN", "IETITN", "ENTTET", "IETETI",
						"ETNNNN", "TNETNE", "EITITN", "IINENN", "TIENNI",
						"TEETEE", "TIEINE", "NENTNE", "EINEIN", "EETTET",
						"EITTEI" }));
		Assert.assertArrayEquals(new int[] { 14, 33 }, code.matches(
				"TEENEIEEEINNITEINTTTNEIEEIEEIENETEETNTIEEIEINTTNNN",
				new String[] { "EIINNI", "NEITII", "NNNITN", "TNTNIE",
						"NETIIN", "INIENI", "NNITTT", "EETNNI", "NTITET",
						"TEINNT", "NTETIE", "EINNET", "EEIIET", "TENETE",
						"INTTNE", "ININTT", "ETEETE", "TITEEI", "IINTIT",
						"ITTNIT", "ETENTI", "TIEIIT", "NEETTT", "ENNNTI",
						"TEEIEN", "ETTTTN", "NNTETE", "ITTIIN", "ENNENT",
						"NETNNI", "NENETT", "ETEIII", "NEETNN", "EEIEEI",
						"TENNEN", "INNIET", "NTNENI", "NNNEEN", "NTNIIE",
						"TETEET", "EITETI", "ITEIIE", "EINEIE", "NIINTT",
						"ENTIEI", "EETITI", "TNETII", "INTINE", "NNNINT",
						"NEETNT" }));
		// Assert.assertArrayEquals(new int[] {0} ,code.matches( "BABABAD", new
		// String[] {"BABAD"}));
		// Assert.assertArrayEquals(new int[] {0} ,code.matches( "ABABABC", new
		// String[] {"ABABC"}));
		Assert.assertArrayEquals(new int[] { 0 },
				code.matches("UAUAAAA", new String[] { "UAAA" }));
		Assert.assertArrayEquals(new int[] { 0 },
				code.matches("XAAAAAAY", new String[] { "XAY" }));
		Assert.assertArrayEquals(new int[] {},
				code.matches("AB", new String[] { "AABB" }));
		Assert.assertArrayEquals(new int[] { 0 },
				code.matches("AAA", new String[] { "A" }));
		Assert.assertArrayEquals(
				new int[] { 2, 3, 4 },
				code.matches("XXX", new String[] { "XXXXX", "XXXX", "XXX",
						"XX", "X" }));
	}

}
